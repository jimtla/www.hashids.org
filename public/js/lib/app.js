// Generated by CoffeeScript 1.6.3
var app;

Function.prototype.method = function(name, func) {
  if (!this.prototype[name]) {
    this.prototype[name] = func;
    return this;
  }
};

String.method('trim', function() {
  return this.replace(/^\s+|\s+$/g, '');
});

app = {
  changeUrl: false,
  changeTitle: false,
  retarded: $.browser.msie === true && parseInt($.browser.version) <= 9,
  loop: [2000, 1500, 1000, 1000, 750, 750, 500, 300, 300, 300, 300, 200, 150, 130, 120, 110, 100],
  hashids: void 0,
  additionalLinks: {
    javascript: [],
    ruby: [
      {
        title: 'Ruby Gem',
        "class": 'rubygem',
        url: 'http://rubygems.org/gems/hashids'
      }
    ],
    python: [
      {
        title: 'PyPI Package',
        "class": 'pypi',
        url: 'https://pypi.python.org/pypi/hashids/'
      }
    ],
    java: [
      {
        title: 'v0.1.4 by @peet',
        "class": 'github',
        url: 'https://github.com/peet/hashids.java'
      }
    ],
    php: [
      {
        title: 'Composer Package',
        "class": 'packagist',
        url: 'https://packagist.org/packages/hashids/hashids'
      }, {
        title: 'Laravel Bundle',
        "class": 'laravel',
        url: 'http://bundles.laravel.com/bundle/hashids'
      }, {
        title: 'CodeIgniter Spark',
        "class": 'code-igniter',
        url: 'http://getsparks.org/packages/sk-hashids/versions/HEAD/show'
      }, {
        title: 'Symfony Bundle',
        "class": 'symfony',
        url: 'https://github.com/neoshadybeat/hashidsBundle'
      }, {
        title: 'Kohana Module',
        "class": 'kohana',
        url: 'http://kohana-modules.com/modules/pocesar/hashids-kohana'
      }, {
        title: 'WordPress Plugin',
        "class": 'wordpress',
        url: 'http://wordpress.org/support/plugin/wp-hashed-ids'
      }, {
        title: 'Silex Service Provider',
        "class": 'packagist',
        url: 'https://packagist.org/packages/redpanda/hashids-service-provider'
      }, {
        title: 'CakePHP Component',
        "class": 'cakephp',
        url: 'https://github.com/FinalDevStudio/cakephp-hashids'
      }
    ],
    perl: [
      {
        title: 'CPAN Module',
        "class": 'cpan',
        url: 'https://metacpan.org/module/Hashids'
      }
    ],
    coffeescript: [],
    go: [
      {
        title: 'GoDoc',
        "class": 'godoc',
        url: 'http://godoc.org/github.com/speps/go-hashids'
      }
    ],
    'node-js': [
      {
        title: 'Node Package',
        "class": 'npm',
        url: 'https://npmjs.org/package/hashids'
      }, {
        title: 'Meteor Package',
        "class": 'meteor',
        url: 'https://github.com/crapthings/meteor-hashids'
      }
    ],
    'objective-c': [],
    net: [
      {
        title: 'NuGet Package',
        "class": 'nuget',
        url: 'http://nuget.org/packages/Hashids.net/'
      }, {
        title: 'v0.3.0 by @Mindflash',
        "class": 'github',
        url: 'https://github.com/Mindflash/hashids.net'
      }
    ],
    lua: []
  },
  checkPath: function() {
    var lang;
    lang = window.location.pathname.replace(/\//g, '');
    if (lang) {
      this.changeTitle = true;
    }
    return this.select(lang || 'javascript');
  },
  select: function(lang) {
    var $input, $output, data, examples, githubData, number, template, that, _i;
    that = $('#' + lang);
    if (that.hasClass('selected')) {
      return;
    }
    that.addClass('selected').siblings().removeClass('selected');
    $input = $("#template-lang-" + lang + "-input");
    $output = $("#template-lang-" + lang + "-output");
    template = $('#template-playground').html();
    githubData = that.attr('github').split('/');
    data = {
      lang: lang,
      title: that.text(),
      github: that.attr('github'),
      username: githubData[3],
      repo: githubData[4],
      input: $input.text().trim(),
      output: $output.text().trim(),
      run: !$output.length,
      links: app.additionalLinks[lang],
      linksExist: !!app.additionalLinks[lang].length
    };
    $('#playground').html(Mustache.render(template, data));
    examples = function(num) {
      var example;
      example = $('#template-example-' + num + '-lang-' + lang).html().trim();
      return $('#template-example-' + num).html(example);
    };
    for (number = _i = 1; _i <= 9; number = ++_i) {
      examples(number);
    }
    if (!this.retarded) {
      prettyPrint();
    }
    if (this.changeTitle) {
      $('title').text(data.title);
    }
    if (this.changeUrl) {
      History.pushState({}, data.title, "/" + lang + "/");
    }
    return this.changeUrl = true;
  },
  logo: function(original) {
    var $logo, hash;
    if (original == null) {
      original = true;
    }
    $logo = $("#wrap-inner h1 a");
    if (original) {
      return $logo.text("hashids");
    } else {
      hash = this.hashids.encrypt(Math.floor(Math.random() * 1000));
      return $logo.text(hash);
    }
  },
  loopLogo: function(index) {
    if (index == null) {
      index = 0;
    }
    if (this.loop[index]) {
      this.logo(false);
      return setTimeout(function() { app.loopLogo(++index) }, this.loop[index]);
    } else {
      this.logo(true);
      return setTimeout("app.loopLogo()", 40000);
    }
  }
};

$(function() {
  var History;
  app.hashids = new Hashids("this is my salt", 7);
  History = window.History;
  window.console2 = {
    log: function() {
      var argument, output, _i, _len, _results;
      output = $('#output');
      output.text("");
      _results = [];
      for (_i = 0, _len = arguments.length; _i < _len; _i++) {
        argument = arguments[_i];
        if (output.text().length) {
          output.append(', ');
        }
        _results.push(output.append(argument));
      }
      return _results;
    }
  };
  $('#documentation button').click(function(e) {
    $(this).parent().remove();
    $('#documentation .hidden').removeClass('hidden');
    return $('#documentation').removeClass('section');
  });
  $('.clickable').click(function(e) {
    var lang, that;
    e.preventDefault();
    that = $(this);
    lang = that.attr('id');
    if (app.retarded) {
      window.location = "/" + lang + "/";
      return;
    }
    return app.select(lang);
  });
  $('#run').live('click', function() {
    var code, e;
    try {
      code = $(this).prev().text().replace(/console\.log/gi, 'console2.log');
      if ($('.clickable.selected').attr('id') === 'coffeescript') {
        code = CoffeeScript.compile(code);
      }
      return eval(code);
    } catch (_error) {
      e = _error;
      return $('#output').text('<error> ' + e);
    }
  });
  app.checkPath();
  History.Adapter.bind(window, 'statechange', function() {
    return app.checkPath();
  });
  return setTimeout("app.loopLogo()", 20000);
});
